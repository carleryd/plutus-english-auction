"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var right = function (dict) {
    return dict.right;
};
var left = function (dict) {
    return dict.left;
};

// | Compose a value acting on a sum from two values, each acting on one of
// | the components of the sum.
// |
// | Specializing `(+++)` to function application would look like this:
// | ```
// | (+++) :: forall a b c d. (a -> b) -> (c -> d) -> (Either a c) -> (Either b d)
// | ```
// | We take two functions, `f` and `g`, and we transform them into a single function which
// | takes an `Either`and maps `f` over the left side and `g` over the right side.  Just like
// | `bi-map` would do for the `bi-functor` instance of `Either`.
var splitChoice = function (dictCategory) {
    return function (dictChoice) {
        return function (l) {
            return function (r) {
                return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(left(dictChoice)(l))(right(dictChoice)(r));
            };
        };
    };
};

// | Compose a value which eliminates a sum from two values, each eliminating
// | one side of the sum.
// |
// | This combinator is useful when assembling values from smaller components,
// | because it provides a way to support two different types of input.
// |
// | Specializing `(|||)` to function application would look like this:
// | ```
// | (|||) :: forall a b c d. (a -> c) -> (b -> c) -> Either a b -> c
// | ```
// | We take two functions, `f` and `g`, which both return the same type `c` and we transform them into a
// | single function which takes an `Either` value with the parameter type of `f` on the left side and
// | the parameter type of `g` on the right side. The function then runs either `f` or `g`, depending on
// | whether the `Either` value is a `Left` or a `Right`.
// | This allows us to bundle two different computations which both have the same result type into one
// | function which will run the approriate computation based on the parameter supplied in the `Either` value.
var fanin = function (dictCategory) {
    return function (dictChoice) {
        return function (l) {
            return function (r) {
                var join = Data_Profunctor.dimap(dictChoice.Profunctor0())(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn)))(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(dictCategory));
                return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(splitChoice(dictCategory)(dictChoice)(l)(r))(join);
            };
        };
    };
};
var choiceFn = {
    left: function (v) {
        return function (v1) {
            if (v1 instanceof Data_Either.Left) {
                return Data_Either.Left.create(v(v1.value0));
            };
            if (v1 instanceof Data_Either.Right) {
                return new Data_Either.Right(v1.value0);
            };
            throw new Error("Failed pattern match at Data.Profunctor.Choice (line 32, column 1 - line 35, column 16): " + [ v.constructor.name, v1.constructor.name ]);
        };
    },
    right: Data_Functor.map(Data_Either.functorEither),
    Profunctor0: function () {
        return Data_Profunctor.profunctorFn;
    }
};
module.exports = {
    left: left,
    right: right,
    splitChoice: splitChoice,
    fanin: fanin,
    choiceFn: choiceFn
};
