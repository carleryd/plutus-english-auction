"use strict";
var Effect_AVar = require("../Effect.AVar/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");

// | Attempts to synchronously take an AVar value, leaving it empty. If the
// | AVar is empty, this will return `Nothing`.
var tryTake = (function () {
    var $0 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
    return function ($1) {
        return $0(Effect_AVar.tryTake($1));
    };
})();

// | Attempts to synchronously read an AVar. If the AVar is empty, this will
// | return `Nothing`.
var tryRead = (function () {
    var $2 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
    return function ($3) {
        return $2(Effect_AVar.tryRead($3));
    };
})();

// | Attempts to synchronously fill an AVar. If the AVar is already filled,
// | this will do nothing. Returns true or false depending on if it succeeded.
var tryPut = function (value) {
    var $4 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
    var $5 = Effect_AVar.tryPut(value);
    return function ($6) {
        return $4($5($6));
    };
};

// | Takes the AVar value, leaving it empty. If the AVar is already empty,
// | the callback will be queued until the AVar is filled. Multiple takes will
// | resolve in order as the AVar fills.
var take = function (avar) {
    return Effect_Aff.makeAff(function (k) {
        return function __do() {
            var c = Effect_AVar.take(avar)(k)();
            return Effect_Aff.effectCanceler(c);
        };
    });
};

// | Synchronously checks the status of an AVar.
var status = (function () {
    var $7 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
    return function ($8) {
        return $7(Effect_AVar.status($8));
    };
})();

// | Reads the AVar value. Unlike `take`, this will not leave the AVar empty.
// | If the AVar is empty, this will queue until it is filled. Multiple reads
// | will resolve at the same time, as soon as possible.
var read = function (avar) {
    return Effect_Aff.makeAff(function (k) {
        return function __do() {
            var c = Effect_AVar.read(avar)(k)();
            return Effect_Aff.effectCanceler(c);
        };
    });
};

// | Sets the value of the AVar. If the AVar is already filled, it will be
// | queued until the value is emptied. Multiple puts will resolve in order as
// | the AVar becomes available.
var put = function (value) {
    return function (avar) {
        return Effect_Aff.makeAff(function (k) {
            return function __do() {
                var c = Effect_AVar.put(value)(avar)(k)();
                return Effect_Aff.effectCanceler(c);
            };
        });
    };
};

// | Creates a fresh AVar with an initial value.
var $$new = (function () {
    var $9 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
    return function ($10) {
        return $9(Effect_AVar["new"]($10));
    };
})();

// | Kills the AVar with an exception. All pending and future actions will
// | resolve immediately with the provided exception.
var kill = function (error) {
    var $11 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
    var $12 = Effect_AVar.kill(error);
    return function ($13) {
        return $11($12($13));
    };
};

// | Creates a fresh AVar.
var empty = Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_AVar.empty);
module.exports = {
    "new": $$new,
    empty: empty,
    status: status,
    take: take,
    tryTake: tryTake,
    put: put,
    tryPut: tryPut,
    read: read,
    tryRead: tryRead,
    kill: kill,
    Empty: Effect_AVar.Empty,
    Filled: Effect_AVar.Filled,
    Killed: Effect_AVar.Killed,
    isEmpty: Effect_AVar.isEmpty,
    isFilled: Effect_AVar.isFilled,
    isKilled: Effect_AVar.isKilled
};
