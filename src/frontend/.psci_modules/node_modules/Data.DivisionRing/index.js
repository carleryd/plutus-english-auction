"use strict";
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var recip = function (dict) {
    return dict.recip;
};

// | Right division, defined as `rightDiv a b = a * recip b`. Left and right
// | division are distinct in this module because a `DivisionRing` is not
// | necessarily commutative.
// |
// | If the type `a` is also a `EuclideanRing`, then this function is
// | equivalent to `div` from the `EuclideanRing` class. When working
// | abstractly, `div` should generally be preferred, unless you know that you
// | need your code to work with noncommutative rings.
var rightDiv = function (dictDivisionRing) {
    return function (a) {
        return function (b) {
            return Data_Semiring.mul((dictDivisionRing.Ring0()).Semiring0())(a)(recip(dictDivisionRing)(b));
        };
    };
};

// | Left division, defined as `leftDiv a b = recip b * a`. Left and right
// | division are distinct in this module because a `DivisionRing` is not
// | necessarily commutative.
// |
// | If the type `a` is also a `EuclideanRing`, then this function is
// | equivalent to `div` from the `EuclideanRing` class. When working
// | abstractly, `div` should generally be preferred, unless you know that you
// | need your code to work with noncommutative rings.
var leftDiv = function (dictDivisionRing) {
    return function (a) {
        return function (b) {
            return Data_Semiring.mul((dictDivisionRing.Ring0()).Semiring0())(recip(dictDivisionRing)(b))(a);
        };
    };
};
var divisionringNumber = {
    recip: function (x) {
        return 1.0 / x;
    },
    Ring0: function () {
        return Data_Ring.ringNumber;
    }
};
module.exports = {
    recip: recip,
    leftDiv: leftDiv,
    rightDiv: rightDiv,
    divisionringNumber: divisionringNumber,
    negate: Data_Ring.negate,
    sub: Data_Ring.sub,
    add: Data_Semiring.add,
    mul: Data_Semiring.mul,
    one: Data_Semiring.one,
    zero: Data_Semiring.zero
};
