
// | This module defines a data type and various functions for interacting
// | with the `Storage` interface of the Web Storage API.
// | For example:
// |
// | ```purescript
// | import Prelude
// | import Effect (Effect)
// | import Effect.Console (log, logShow)
// | import Web.HTML (window)
// | import Web.HTML.Window (localStorage)
// | import Web.Storage.Storage (clear, getItem, removeItem, setItem)
// |
// | main :: Effect Unit
// | main = do
// |   w <- window
// |   s <- localStorage w
// |   setItem "this-is-my-key" "Here is my value." s
// |   v <- getItem "this-is-my-key" s
// |   logShow v
// |
// |   removeItem "this-is-my-key" s
// |   v' <- getItem "this-is-my-key" s
// |   log "It is gone!"
// |   logShow v'
// |
// |   clear s
// | ```
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Effect = require("../Effect/index.js");

// | Retrieves the key at the given index in the storage, if one exists.
var key = function (i) {
    var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    var $1 = $foreign["_key"](i);
    return function ($2) {
        return $0($1($2));
    };
};

// | Retrieves the value stored at the given key, if one exists.
var getItem = function (s) {
    var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    var $4 = $foreign["_getItem"](s);
    return function ($5) {
        return $3($4($5));
    };
};
module.exports = {
    key: key,
    getItem: getItem,
    length: $foreign.length,
    setItem: $foreign.setItem,
    removeItem: $foreign.removeItem,
    clear: $foreign.clear
};
